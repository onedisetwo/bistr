        -:    0:Colorization: profile count: [46m[Kzero coverage (exceptional)[m[K [41m[Kzero coverage (unexceptional)[m[K [45m[Kunexecuted block[m[K
        -:    0:Source:/home/onedisetwo/yandexDisk/bistr/sem3/task1/inc/status.h
        -:    0:Graph:task.cpp.gcno
        -:    0:Data:task.cpp.gcda
        -:    0:Runs:1
        -:    1:/*!
        -:    2:	\file
        -:    3:	\author –ü–æ–ª–∏–Ω–∞ –ö–ª–∏–Ω–æ–≤–∞
        -:    4:	\brief –ó–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        -:    5:
        -:    6:	–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ –∫–ª–∞—Å—Å Status, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è
        -:    7:	—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –∏ –º–µ—Ç–æ–¥–æ–≤ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏
        -:    8:*/
        -:    9:
        -:   10:# ifndef STATUS
        -:   11:# define STATUS
        -:   12:
        -:   13:/// –ù–∞–±–æ—Ä –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫
        -:   14:enum class err_type {
        -:   15:	success, ///< –û—à–∏–±–æ–∫ –Ω–µ –±—ã–ª–æ
        -:   16:	open, ///< –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
        -:   17:	format, ///< –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
        -:   18:	memory, ///< –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å –ø–∞–º—è—Ç—å
        -:   19:	unknown, ///< –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
        -:   20:} ;
        -:   21:
        -:   22:/*!
        -:   23:	\brief –ö–ª–∞—Å—Å Status –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        -:   24:*/
        -:   25:class Status {
        -:   26:	private:
        -:   27:		err_type state = err_type::success;
        -:   28:	public:
        -:   29:		/// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        -:   30:		Status () = default;
        -:   31:		/// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º—É —á–ª–µ–Ω—É –∫–ª–∞—Å—Å–∞
       18:   32:		Status (const err_type& n_state) {
       18:   33:			state = n_state;
       18:   34:		}
        -:   35:		/// –°–µ—Ç—Ç–µ—Ä –¥–ª—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–ª–µ–Ω–∞ –∫–ª–∞—Å—Å–∞
        1:   36:		void set_state (err_type n_state) {
        1:   37:			state = n_state;
        1:   38:		}
        -:   39:		/// –ì–µ—Ç—Ç–µ—Ä –¥–ª—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–ª–µ–Ω–∞ –∫–ª–∞—Å—Å–∞
        -:   40:		err_type get_state () const {
        -:   41:			return state;
        -:   42:		}
        -:   43:		/// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ succeess
        -:   44:		/// \return true –ø—Ä–∏ state == succces –∏ false –∏–Ω–∞—á–µ
       13:   45:		bool good () const {
       13:   46:			return (state == err_type::success ? true : false);
        -:   47:		}
        -:   48:		/// –í—ã–≤–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –æ—à–∏–±–∫–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π –æ –Ω–∏—Ö
        3:   49:		void print_error_message (FILE *fp = stdout) const {
        3:   50:			if(state == err_type::success)
[41;37m[K        0[m[K:   51:				return ;
        3:   52:			switch(state) {
        1:   53:				case err_type::open:
        1:   54:					fprintf(fp, "Error when opening file\n");
        1:   55:					break;
        2:   56:				case err_type::format:
        2:   57:					fprintf(fp, "Wrong data format\n");
        2:   58:					break;
[41;37m[K        0[m[K:   59:				case err_type::memory:
[41;37m[K        0[m[K:   60:					fprintf(fp, "Not enough memory\n");
[41;37m[K        0[m[K:   61:					break;
[41;37m[K        0[m[K:   62:				case err_type::unknown:
[41;37m[K        0[m[K:   63:					fprintf(fp, "Unknown error\n");
[41;37m[K        0[m[K:   64:					break;
        -:   65:			}
        -:   66:		}
        -:   67:		/// –û–ø–µ—Ä–∞—Ç–æ—Ä —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞
        -:   68:		/// \return true –ø—Ä–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–µ state –∏ false –∏–Ω–∞—á–µ
        -:   69:		bool operator== (const Status& n_st) {
        -:   70:			return (state == n_st.state ? true : false);
        -:   71:		}
        -:   72:		/// –û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞
        -:   73:		/// \return true –ø—Ä–∏ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–µ state –∏ false –∏–Ω–∞—á–µ
        -:   74:		bool operator!= (const Status& n_st) {
        -:   75:			return (state != n_st.state ? true : false);
        -:   76:		}
        -:   77:		/// –û–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è
       11:   78:		Status& operator= (const Status& n_Status) {
       11:   79:			state = n_Status.state;
       11:   80:			return *this;
        -:   81:		}
        -:   82:} ;
        -:   83:
        -:   84:# endif //STATUS
