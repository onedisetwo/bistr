        -:    0:Colorization: profile count: [46m[Kzero coverage (exceptional)[m[K [41m[Kzero coverage (unexceptional)[m[K [45m[Kunexecuted block[m[K
        -:    0:Source:/home/onedisetwo/yandexDisk/bistr/sem3/task1/src/task.cpp
        -:    0:Graph:task.cpp.gcno
        -:    0:Data:task.cpp.gcda
        -:    0:Runs:1
        -:    1:/*!
        -:    2:	\file
        -:    3:	\author –ü–æ–ª–∏–Ω–∞ –ö–ª–∏–Ω–æ–≤–∞
        -:    4:	\brief –§–∞–π–ª –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ 1
        -:    5:
        -:    6:	–°–æ–¥–µ—Ä–∂–∏—Ç main, –∞ —Ç–∞–∫–∂–µ –∫–ª–∞—Å—Å Result –∏ —Ñ—É–Ω–∫—Ü–∏—é process –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∑–∞–¥–∞—á—É
        -:    7:*/
        -:    8:
        -:    9:# include <stdio.h>
        -:   10:# include <string.h>
        -:   11:
        -:   12:# include "../inc/geometry.h"
        -:   13:# include "../inc/status.h"
        -:   14:
        -:   15:/*!
        -:   16:	\brief –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        -:   17:
        -:   18:	–°–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è: status - –∫–æ–¥ –æ—à–∏–±–∫–∏, –∏ answer - –æ—Ç–≤–µ—Ç –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
        -:   19:*/
        -:   20:class Result {
        -:   21:	private:
        8:   22:		Status status = Status(err_type::unknown); ///< –¢–∏–ø –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏
        -:   23:		double answer = 0; ///< –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É
        -:   24:	public:
        -:   25:		/// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–æ–≥–ª–∞—Å–Ω–æ –∑–Ω–∞—á–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        4:   26:		Result () = default;
        -:   27:		/// –ö–æ–Ω—Å—Ç—Ä—É—Ç–æ—Ä –ø–æ status
        -:   28:		/// \defails –ø–æ–ª–µ answer –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏
        3:   29:		Result (Status n_status) {
        3:   30:			status = n_status;
        3:   31:		}
        -:   32:		/// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ answer, status —Å—á–∏—Ç–∞–µ—Ç—è—Å —É—Å–ø–µ—à–Ω—ã–º
        1:   33:		Result (double n_answer) {
        1:   34:			status.set_state(err_type::success);
        1:   35:			answer = n_answer;
        1:   36:		}
        -:   37:		/// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º
        -:   38:		Result (Status n_status, double n_answer) {
        -:   39:			status = n_status;
        -:   40:			answer = n_answer;
        -:   41:		}
        -:   42:		/*
        -:   43:			–ü–µ—á–∞—Ç–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –∑–∞–¥–∞—á–∏
        -:   44:
        -:   45:			\param spaces –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º (0)
        -:   46:			\param fp –§–∞–π–ª –≤—ã–≤–æ–¥–∞ (stdout)
        -:   47:
        -:   48:			–ü–µ—á–∞—Ç–∞–µ—Ç –Ω–∞ –¥–≤—É—Ö —Å—Ç—Ä–æ–∫–∞—Ö –ª–∏–±–æ [OK], [Answer]; –ª–∏–±–æ [FAIL], [Error message]
        -:   49:		*/
        4:   50:		void print (int spaces = 0, FILE *fp = stdout) const {
       12:   51:			for(int i = 0; i < spaces; i++)
        8:   52:				fprintf(fp, " ");
        4:   53:			if(status.good()) {
        1:   54:				fprintf(fp, "[OK]\n");
        3:   55:				for(int i = 0; i < spaces; i++)
        2:   56:					fprintf(fp, " ");
        1:   57:				fprintf(fp, "Answer: %lf\n", answer);
        -:   58:			}
        -:   59:			else{
        3:   60:				fprintf(fp, "[FAIL]\n");
        9:   61:				for(int i = 0; i < spaces; i++)
        6:   62:					fprintf(fp, " ");
        3:   63:				status.print_error_message(fp);
        -:   64:			}
        4:   65:		}
        -:   66:} ;
        -:   67:
        -:   68:/*!
        -:   69:	–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ 1 –Ω–∞ –¥–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
        -:   70:
        -:   71:	\param filename –ò–º—è —Ñ–∞–π–ª–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        -:   72:	\return Result - –∫–æ–¥ –æ—à–∏–±–∫–∏ –∏ (–µ—Å–ª–∏ success) –æ—Ç–≤–µ—Ç
        -:   73:*/
        4:   74:Result process (const char* filename) {
        -:   75:	int n;
        4:   76:	R2::Polygon m_polygon;
        4:   77:	R2::Point viewpoint;
        -:   78:	FILE *fp;
        4:   79:	Status tmp_status;
        4:   80:	if(!(fp = fopen(filename, "r")))
        1:   81:		return Result(err_type::open);
        4:   82:	if(!(tmp_status = m_polygon.read(fp, false)).good() ||
        4:   83:		!(tmp_status = viewpoint.read(fp, false)).good()){
        2:   84:		fclose(fp);
        2:   85:		return Result(tmp_status);
        -:   86:	}
        1:   87:	return Result(m_polygon.get_view_angle(viewpoint));
        4:   88:}
        -:   89:
        -:   90:/*!
        -:   91:	–§—É–Ω–∫—Ü–∏—è main
        -:   92:
        -:   93:	–ò–º–µ–µ—Ç 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞, –≤—ã–±–∏—Ä–∞–µ–º—ã—Ö –ø—Ä–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏:
        -:   94:	–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏ —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        -:   95:*/
        1:   96:int main (void) {
        -:   97:#ifdef SELFTEST
        1:   98:	const int TEST_NUM = 4; ///< –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤
        1:   99:	const char* test_filenames[TEST_NUM] = {"non-existent.txt", "empty.txt",
        -:  100:		"wrong1.txt", "test1.txt"}; ///< –ò–º–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        5:  101:	for(int i = 0; i < TEST_NUM; i++) {
        4:  102:		char folder[30] = "test/";
        4:  103:		char* final_filename = strcat(folder, test_filenames[i]);
        4:  104:		Result curr_result;
        4:  105:		printf("%s \n", test_filenames[i]);
        4:  106:		curr_result = process(final_filename);
        4:  107:		curr_result.print(2);
        -:  108:	}
        -:  109:# else
        -:  110:	char* filename;
        -:  111:	Result curr_result;
        -:  112:	scanf("%s", filename);
        -:  113:	printf("%s \n", filename);
        -:  114:	curr_result = process(filename);
        -:  115:	curr_result.print(2);
        -:  116:# endif
        1:  117:	return 0;
        -:  118:}
