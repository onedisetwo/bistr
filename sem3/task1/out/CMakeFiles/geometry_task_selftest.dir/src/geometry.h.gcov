        -:    0:Colorization: profile count: [46m[Kzero coverage (exceptional)[m[K [41m[Kzero coverage (unexceptional)[m[K [45m[Kunexecuted block[m[K
        -:    0:Source:/home/onedisetwo/yandexDisk/bistr/sem3/task1/inc/geometry.h
        -:    0:Graph:task.cpp.gcno
        -:    0:Data:task.cpp.gcda
        -:    0:Runs:1
        -:    1:/*!
        -:    2:	\file
        -:    3:	\author –ü–æ–ª–∏–Ω–∞ –ö–ª–∏–Ω–æ–≤–∞
        -:    4:	\brief –ó–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª —Å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π –∫–ª–∞—Å—Å–æ–≤ Point –∏ Polygon –≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ–±—ä—ë–º–µ
        -:    5:*/
        -:    6:
        -:    7:# ifndef GEOMETRY
        -:    8:# define GEOMETRY
        -:    9:
        -:   10:# include <cmath>
        -:   11:# include <cstdio>
        -:   12:# include "status.h"
        -:   13:
        -:   14:/// –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º—ë–Ω –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
        -:   15:namespace R2 {
        -:   16:
        -:   17:	/*!
        -:   18:		\brief –ö–ª–∞—Å—Å, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π —Ç–æ—á–∫—É
        -:   19:	*/
        -:   20:	class Point {
        -:   21:		private:
        -:   22:			double x = 0;
        -:   23:			double y = 0;
        -:   24:		public:
        -:   25:			/// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        5:   26:			Point () = default;
        -:   27:			/// –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        -:   28:			~Point () = default;
        -:   29:			/// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ –¥—Ä—É–≥–æ–π —Ç–æ—á–∫–µ
        -:   30:			Point (const Point& p) {
        -:   31:				x = p.x;  y = p.y;
        -:   32:			}
        -:   33:			/// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        4:   34:			Point (double n_x, double n_y) {
        4:   35:				x = n_x;  y = n_y;
        4:   36:			}
        -:   37:			/// –û–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è
        -:   38:			Point& operator= (const Point& p) {
        -:   39:				x = p.x;  y = p.y;
        -:   40:				return *this;
        -:   41:			}
        -:   42:			/*!
        -:   43:				–í–≤–æ–¥ —Ç–æ—á–∫–∏ –∏–∑ —Ñ–∞–π–ª—ã
        -:   44:
        -:   45:				\param fp –§–∞–π–ª –¥–ª—è –≤–≤–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é stdin)
        -:   46:				\param is_human {–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é false, –ø—Ä–∏ true –≤—ã–≤–æ–¥—è—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
        -:   47:					–æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç}
        -:   48:
        -:   49:				\warning –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç –∑–∞—Ä–∞–Ω–µ–µ
        -:   50:				\warning –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–¥–µ—Ä–∂—Ç–º–æ–µ —Å—Ç–∏—Ä–∞–µ—Ç—Å—è
        -:   51:
        -:   52:				–°–Ω–∞—á–∞–ª–∞ –≤–≤–æ–¥–∏—Ç—Å—è —á–∏—Å–ª–æ –≤–µ—Ä—à–∏–Ω, –ø–æ—Ç–æ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞–∂–¥–æ–π
        -:   53:			*/
        6:   54:			Status read (FILE* fp = stdin, bool is_human = false) {
        6:   55:				if(fp == nullptr)
[41;37m[K        0[m[K:   56:					return Status(err_type::open);
[45;37m[K        6[m[K:   57:				if(is_human)  printf("Input coordinates: ");
        6:   58:				if(fscanf(fp, "%lf %lf", &x, &y) != 2)
        1:   59:					return Status(err_type::format);
        5:   60:				return Status(err_type::success);
        -:   61:			}
        -:   62:			/// –ü–µ—á–∞—Ç—å —Ç–æ—á–∫–∏
        -:   63:			void print () {
        -:   64:				printf("x: %lf , y: %lf\n", x, y);
        -:   65:			}
        -:   66:			/// –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
        -:   67:			double get_distance (Point& p) const {
        -:   68:				return sqrt(pow(x - p.x, 2) + pow(y - p.y, 2));
        -:   69:			}
        -:   70:			/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–≥–æ–ª –º–µ–∂–¥—É Ox –∏ –≤–µ–∫—Ç–æ—Ä–æ–º (x, y)
        4:   71:			double get_angle () const {
[45;37m[K        4[m[K:   72:				return (x != 0 ? atan(y / x) : (y > 0 ? M_PI/2. : -M_PI/2.));
        -:   73:			}
        -:   74:			friend class Polygon;
        -:   75:	} ;
        -:   76:
        -:   77:	/*!
        -:   78:		\brief –ö–ª–∞—Å—Å, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫
        -:   79:	*/
        -:   80:	class Polygon {
        -:   81:		private:
        -:   82:			int n = 0; ///< –ß–∏—Å–ª–æ –≤–µ—Ä—à–∏–Ω
        -:   83:			Point* vertex = nullptr; ///< –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –º–∞—Å—Å–∏–≤ –≤–µ—Ä—à–∏–Ω
        -:   84:		public:
        -:   85:			/// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        -:   86:			Polygon () = default;
        -:   87:			/// –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
        4:   88:			~Polygon () {
        4:   89:				if(vertex != nullptr)
        2:   90:					delete[] vertex;
        4:   91:			}
        -:   92:			/// –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π –∫–ª–∞—Å—Å–∞ (—Å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏ vertex)
        -:   93:			void clear () {
        -:   94:				n = 0;
        -:   95:				if(vertex != nullptr)
        -:   96:					delete[] vertex;
        -:   97:				vertex = nullptr;
        -:   98:			}
        -:   99:			/*!
        -:  100:				–í–≤–æ–¥ —Ç–æ—á–µ–∫ –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞
        -:  101:
        -:  102:				\param fp –§–∞–π–ª –¥–ª—è –≤–≤–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é stdin)
        -:  103:				\param is_human {–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é false, –ø—Ä–∏ true –≤—ã–≤–æ–¥—è—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
        -:  104:					–æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç}
        -:  105:
        -:  106:				\warning –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç –∑–∞—Ä–∞–Ω–µ–µ
        -:  107:				\warning –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–¥–µ—Ä–∂—Ç–º–æ–µ —Å—Ç–∏—Ä–∞–µ—Ç—Å—è
        -:  108:
        -:  109:				–°–Ω–∞—á–∞–ª–∞ –≤–≤–æ–¥–∏—Ç—Å—è —á–∏—Å–ª–æ –≤–µ—Ä—à–∏–Ω, –ø–æ—Ç–æ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞–∂–¥–æ–π
        -:  110:			*/
        3:  111:			Status read (FILE *fp = stdin, bool is_human = false) {
        3:  112:				if(fp == nullptr)
[41;37m[K        0[m[K:  113:					return Status(err_type::open);
[45;37m[K        3[m[K:  114:				if(is_human)  printf("Enter number of vertices: ");
        3:  115:				if(fscanf(fp, "%d", &n) != 1)
        1:  116:					return Status(err_type::format);
[45;37m[K        7[m[K:  117:				vertex = new Point[n];
[45;37m[K        2[m[K:  118:				if(is_human)  printf("Enter vertices' coordinates:\n");
        6:  119:				for(int i = 0; i < n; i++){
        5:  120:					if(!vertex[i].read(fp, is_human).good())
        1:  121:						return Status(err_type::format);
        -:  122:				}
        1:  123:				return Status(err_type::success);
        -:  124:			}
        -:  125:			/// –ü–µ—á–∞—Ç—å –¥–∞–Ω–Ω—ã—Ö –æ –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–µ –≤ stdout
        -:  126:			void print () const {
        -:  127:				printf("Number of vertices: %d\n", n);
        -:  128:				for(int i = 0; i < n; i++)
        -:  129:					printf("%d: %lf %lf\n", i + 1, vertex[i].x, vertex[i].y);
        -:  130:			}
        -:  131:			/// –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ - –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —É–≥–ª–∞, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ p –≤–∏–¥–∏—Ç –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫
        1:  132:			double get_view_angle (Point& p) {
        1:  133:				double min_angle = M_PI, max_angle = -M_PI, tmp;
        5:  134:				for(int i = 0; i < n; i++) {
        4:  135:					Point v(vertex[i].x - p.x, vertex[i].y - p.y);
        4:  136:					tmp = v.get_angle();
        4:  137:					min_angle = std::min(min_angle, tmp);
        4:  138:					max_angle = std::max(max_angle, tmp);
        -:  139:				}
        1:  140:				return max_angle - min_angle;
        -:  141:			}
        -:  142:	} ;
        -:  143:
        -:  144:}
        -:  145:
        -:  146:# endif // GEOMETRY
